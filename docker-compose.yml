networks:
  rag-net:
    driver: bridge

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    hostname: zookeeper
    container_name: zookeeper
    networks:
      - rag-net
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    hostname: kafka
    container_name: kafka
    networks:
      - rag-net
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      # Using your team's exact, proven listener configuration
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CREATE_TOPICS: "user-events:1:1"

  chroma:
    image: chromadb/chroma:0.5.0
    container_name: chroma
    networks:
      - rag-net
    ports:
      - "8000:8000"
    volumes:
      - chroma-data:/chroma/chroma
    command: "uvicorn chromadb.app:app --host 0.0.0.0 --port 8000"

  live-producer-app:
    build: ./live-producer-app
    container_name: live-producer-app
    networks:
      - rag-net
    depends_on:
      - kafka
    environment:
      # This producer connects to the internal listener
      KAFKA_BOOTSTRAP_SERVERS: 'kafka:29092'
    command: sleep infinity

  kafka-to-chroma-consumer:
    build: ./kafka-to-chroma-consumer
    container_name: kafka-to-chroma-consumer
    networks:
      - rag-net
    depends_on:
      - kafka
      - chroma
    environment:
      # This consumer also connects to the internal listener
      KAFKA_BOOTSTRAP_SERVERS: "kafka:29092"
      KAFKA_TOPIC: "user-events"
      CHROMA_HOST: "chroma"
      CHROMA_PORT: 8000
    restart: on-failure

volumes:
  chroma-data:
    driver: local